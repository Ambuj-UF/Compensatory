# -*- coding: utf-8 -*-
# Copyright 2019 by Ambuj Kumar, Iowa State University.
# All rights reserved.
#
# Bug reports welcome: ambuj@iastate.edu


def Blossum(a1, a2):
    
    """Blosum matrix data return function"""
    
    if a1 == '?' or a1 == 'X':
        a1 = '-'
    if a2 == '?' or a2 == 'X':
        a2 = '-'

    data_Matrix = {
                   'A': [4,  0, -2, -1, -2,  0, -2, -1, -1, -1, -1, -2, -1, -1, -1,  1,  0,  0, -3, -2,  0],
                   'C': [0,  9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2,  0],
                   'D': [-2, -3,  6,  2, -3, -1, -1, -3, -1, -4, -3,  1, -1,  0, -2,  0, -1, -3, -4, -3,  0],
                   'E': [-1, -4,  2,  5, -3, -2,  0, -3,  1, -3, -2,  0, -1,  2,  0,  0, -1, -2, -3, -2,  0],
                   'F': [-2, -2, -3, -3,  6, -3, -1,  0, -3,  0,  0, -3, -4, -3, -3, -2, -2, -1,  1,  3,  0],
                   'G': [0, -3, -1, -2, -3,  6, -2, -4, -2, -4, -3,  0, -2, -2, -2,  0, -2, -3, -2, -3,  0],
                   'H': [-2, -3, -1,  0, -1, -2,  8, -3, -1, -3, -2,  1, -2,  0,  0, -1, -2, -3, -2,  2,  0],
                   'I': [-1, -1, -3, -3,  0, -4, -3,  4, -3,  2,  1, -3, -3, -3, -3, -2, -1,  3, -3, -1,  0],
                   'K': [-1, -3, -1,  1, -3, -2, -1, -3,  5, -2, -1,  0, -1,  1,  2,  0, -1, -2, -3, -2,  0],
                   'L': [-1, -1, -4, -3,  0, -4, -3,  2, -2,  4,  2, -3, -3, -2, -2, -2, -1,  1, -2, -1,  0],
                   'M': [-1, -1, -3, -2,  0, -3, -2,  1, -1,  2,  5, -2, -2,  0, -1, -1, -1,  1, -1, -1,  0],
                   'N': [-2, -3,  1,  0, -3,  0,  1, -3,  0, -3, -2,  6, -2,  0,  0,  1,  0, -3, -4, -2,  0],
                   'P': [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2,  7, -1, -2, -1, -1, -2, -4, -3,  0],
                   'Q': [-1, -3,  0,  2, -3, -2,  0, -3,  1, -2,  0,  0, -1,  5,  1,  0, -1, -2, -2, -1,  0],
                   'R': [-1, -3, -2,  0, -3, -2,  0, -3,  2, -2, -1,  0, -2,  1,  5, -1, -1, -3, -3, -2,  0],
                   'S': [1, -1,  0,  0, -2,  0, -1, -2,  0, -2, -1,  1, -1,  0, -1,  4,  1, -2, -3, -2,  0],
                   'T': [0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1,  0, -1, -1, -1,  1,  5,  0, -2, -2,  0],
                   'V': [0, -1, -3, -2, -1, -3, -3,  3, -2,  1,  1, -3, -2, -2, -3, -2,  0,  4, -3, -1,  0],
                   'W': [-3, -2, -4, -3,  1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11,  2,  0],
                   'Y': [-2, -2, -3, -2,  3, -3,  2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1,  2,  7,  0],
                   '-': [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]
    }

    tag = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y', '-']

    return data_Matrix[a1][tag.index(a2)]
    
    
def KMAT(a1, a2):

    if a1 == '?':
        a1 = '-'
    if a2 == '?':
        a2 = '-'
        
    data_Matrix = { "A": [ 4, -2, -2, -2,  1, -1,  0,  0, -1, -1, -1, -1, -1, -1, -1,  1,  0, -3, -3,  0, -2, -1,  0, -4, 0],
                    "R": [-2,  5,  0, -2, -4,  1,  0, -2,  1, -3, -2,  2, -1, -2, -2,  0, -1, -2, -2, -2, -1,  0, -1, -4, 0],
                    "N": [-2,  0,  6,  1, -3,  2, -1,  0,  1, -3, -4,  0, -2, -3, -2,  1,  0, -4, -2, -3,  3,  0, -1, -4, 0],
                    "D": [-2, -2,  1,  8, -3,  0,  3, -1,  1, -3, -4, -1, -3, -3, -1,  1, -2, -4, -3, -3,  4,  1, -1, -4, 0],
                    "C": [ 1, -4, -3, -3, 12, -2, -3, -3, -3, -2, -1, -3, -1, -2, -3, -1, -1, -1, -2, -1, -3, -3, -2, -4, 0],
                    "Q": [-1,  1,  2,  0, -2,  4,  1, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2,  0, -2,  0,  3, -1, -4, 0],
                    "E": [ 0,  0, -1,  3, -3,  1,  4, -3,  0, -4, -3,  0, -2, -4, -1, -1, -4, -3, -2, -2,  1,  4, -1, -4, 0],
                    "G": [ 0, -2,  0, -1, -3, -2, -3,  8, -3, -4, -4, -2, -3, -4, -2,  0, -2, -2, -3, -3, -1, -2, -1, -4, 0],
                    "H": [-1,  1,  1,  1, -3,  0,  0, -3,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  0,  0, -1, -4, 0],
                    "I": [-1, -3, -3, -3, -2, -3, -4, -4, -3,  4,  3, -4,  1,  0, -3, -2, -1, -3, -1,  3, -3, -3, -1, -4, 0],
                    "L": [-1, -2, -4, -4, -1, -2, -3, -4, -3,  3,  5, -3,  2,  0, -3, -3, -1, -2, -1,  3, -4, -3, -1, -4, 0],
                    "K": [-1,  2,  0, -1, -3,  1,  0, -2, -1, -4, -3,  5, -2, -3, -1,  0, -1, -3, -2, -2,  0,  1, -1, -4, 0],
                    "M": [-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -2,  7,  1, -3, -1, -1, -3,  0,  1, -3, -1, -1, -4, 0],
                    "F": [-1, -2, -3, -3, -2, -3, -4, -4, -1,  0,  0, -3,  1,  5, -4, -2, -2,  1,  3,  0, -3, -3, -1, -4, 0],
                    "P": [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -3, -4,  7, -1, -1, -4, -3, -3, -2, -1, -2, -4, 0],
                    "S": [ 1,  0,  1,  1, -1,  0, -1,  0, -1, -2, -3,  0, -1, -2, -1,  4,  2, -3, -1, -2,  0,  0,  0, -4, 0],
                    "T": [ 0, -1,  0, -2, -1, -1, -4, -2, -2, -1, -1, -1, -1, -2, -1,  2,  6, -2, -2,  0, -1, -1,  0, -4, 0],
                    "W": [-3, -2, -4, -4, -1, -2, -3, -2, -2, -3, -2, -3, -3,  1, -4, -3, -2, 11,  3, -3, -4, -3, -2, -4, 0],
                    "Y": [-3, -2, -2, -3, -2,  0, -2, -3,  2, -1, -1, -2,  0,  3, -3, -1, -2,  3,  7, -1, -3, -2, -1, -4, 0],
                    "V": [ 0, -2, -3, -3, -1, -2, -2, -3, -3,  3,  3, -2,  1,  0, -3, -2,  0, -3, -1,  4, -3, -2, -1, -4, 0],
                    "B": [-2, -1,  3,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3, -2,  0, -1, -4, -3, -3,  4,  1, -1, -4, 0],
                    "Z": [-1,  0,  0,  1, -3,  3,  4, -2,  0, -3, -3,  1, -1, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4, 0],
                    "X": [ 0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1, -4, 0],
                    "*": [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1, 0],
                    "-": [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0]
                    }
                    
    tag = ['A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V', 'B', 'Z', 'X', '*', '-']

    return data_Matrix[a1][tag.index(a2)]


def biophys():
    
    """
        Contains Hydrophobicity and molecular weight data
        
        Column1 => Hydrophobicity data at pH 7
        Column2 => Hydrophobicity data at pH 2
        Column3 => Molecular weight
        """
    
    data_Matrix = {
                    'F': [100, 92, 165.2],
                    'I': [99, 100, 131.2],
                    'W': [97, 84, 204.2],
                    'L': [97, 100, 131.2],
                    'V': [76, 79, 117.2],
                    'M': [74, 74, 149.2],
                    'Y': [63, 49, 181.2],
                    'C': [49, 52, 121.2],
                    'A': [41, 47, 89.1],
                    'T': [13, 13, 119.1],
                    'H': [8, -42, 155.2],
                    'G': [0, 0, 75.1],
                    'S': [-5, -7, 105.1],
                    'Q': [-10, -18, 146.2],
                    'R': [-14, -26, 174.2],
                    'K': [-23, -37, 146.2],
                    'N': [-28, -41, 132.1],
                    'E': [-31, 8, 147.1],
                    'P': [-46, -46, 115.1],
                    'D': [-55, -18, 133.1],
                    '-': [0, 0, 0]

                    }

    return data_Matrix

def kidera():
    """
        Kidera factor from Dan
        """
    data_Matrix = { "A": [-1.56, -1.67, -0.97, -0.27, -0.93, -0.78, -0.2, -0.08, 0.21, -0.48],
                    "R": [0.22, 1.27, 1.37, 1.87, -1.7, 0.46, 0.92, -0.39, 0.23, 0.93],
                    "N": [1.14, -0.07, -0.12, 0.81, 0.18, 0.37, -0.09, 1.23, 1.1, -1.73],
                    "D": [0.58, -0.22, -1.58, 0.81, -0.92, 0.15, -1.52, 0.47, 0.76, 0.7],
                    "C": [0.12, -0.89, 0.45, -1.05, -0.71, 2.41, 1.52, -0.69, 1.13, 1.1],
                    "Q": [-0.47, 0.24, 0.07, 1.1, 1.1, 0.59, 0.84, -0.71, -0.03, -2.33],
                    "E": [-1.45, 0.19, -1.61, 1.17, -1.31, 0.4, 0.04, 0.38, -0.35, -0.12],
                    "G": [1.46, -1.96, -0.23, -0.16, 0.1, -0.11, 1.32, 2.36, -1.66, 0.46],
                    "H": [-0.41, 0.52, -0.28, 0.28, 1.61, 1.01, -1.85, 0.47, 1.13, 1.63],
                    "I": [-0.73, -0.16, 1.79, -0.77, -0.54, 0.03, -0.83, 0.51, 0.66, -1.78],
                    "L": [-1.04, 0, -0.24, -1.1, -0.55, -2.05, 0.96, -0.76, 0.45, 0.93],
                    "K": [-0.34, 0.82, -0.23, 1.7, 1.54, -1.62, 1.15, -0.08, -0.48, 0.6],
                    "M": [-1.4, 0.18, -0.42, -0.73, 2, 1.52, 0.26, 0.11, -1.27, 0.27],
                    "F": [-0.21, 0.98, -0.36, -1.43, 0.22, -0.81, 0.67, 1.1, 1.71, -0.44],
                    "P": [2.06, -0.33, -1.15, -0.75, 0.88, -0.45, 0.3, -2.3, 0.74, -0.28],
                    "S": [0.81, -1.08, 0.16, 0.42, -0.21, -0.43, -1.89, -1.15, -0.97, -0.23],
                    "T": [0.26, -0.7, 1.21, 0.63, -0.1, 0.21, 0.24, -1.15, -0.56, 0.19],
                    "W": [0.3, 2.1, -0.72, -1.57, -1.16, 0.57, -0.48, -0.4, -2.3, -0.6],
                    "Y": [1.38, 1.48, 0.8, -0.56, 0, -0.68, -0.31, 1.03, -0.05, 0.53],
                    "V": [-0.74, -0.71, 2.04, -0.4, 0.5, -0.81, -1.07, 0.06, -0.46, 0.65],
                    "-": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
                }
                
    return data_Matrix
    
def _property_diff(aa1, aa2, distObj):
    with open("prop_vals.txt", "a+") as fp:
        if str(aa1) == "?":
            aa1 = "-"
        if str(aa2) == "?":
            aa2 = "-"
        aa1 = aa1.upper()
        aa2 = aa2.upper()
        posScore = dict()
        fp.write("%s\t%s" %("Blossum", Blossum(aa1, aa2)/distObj))
        fp.write("%s\t%s" %("KMAT", Blossum(aa1, aa2)/distObj))
        for j in range(10):
            x = KIDERA[aa1][j]-KIDERA[aa2][j]
            fp.write("%s\t%s" %("K" + str(j+1), x/distObj))

    return posScore




